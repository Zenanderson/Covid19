# -*- coding: utf-8 -*-
"""Covid-19 - Predição com Prophet do Facebook

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JZ21dADkpyFjj8zCp4q042XDf-mTeev8
"""

##Caminho do data set

## https://raw.githubusercontent.com/sandeco/CanalSandeco/master/covid-19/covid_19_data.csv

# Bibliotecas para manipular os dados
import pandas as pd
import numpy as np

# Biblioteca Prophet do Facebook para predição dos dados
from fbprophet import Prophet

"""**Lendo o data set, um arquivo em csv.**"""

covid = pd.read_csv('https://raw.githubusercontent.com/sandeco/CanalSandeco/master/covid-19/covid_19_data.csv')

covid.tail()

"""**Renomeando as colunas ObservartionDate e Country/Region**"""

covid.rename(columns={'ObservationDate':'Date', 'Country/Region':'Country'},inplace=True)

covid.head(2)

"""**Criando uma variável mortes e agrupando por data e somando por mortes. Por fim indexando**"""

mortes = covid.groupby('Date').sum()['Deaths'].reset_index()
mortes.tail()

"""**Plotando as mortes**"""

mortes.plot()

"""**Formato das colunas de dados do Prophet, ds e y**

A coluna ds deve ter o formato esperado pelo pandas, idealmente AAAA-MM-DD, para AAAA-MM-DD HH::MM:SS para timestamp.

A coluna y deve ser númerica e representa a medida que desejamos prever.

**Renomeando as colunas date e Deaths, para ds e y.**
"""

mortes.columns = ['ds', 'y']

mortes.head()

"""**Transformando a coluna ds no formato timestamp**"""

mortes['ds'] = pd.to_datetime(mortes['ds'])

mortes.head()

"""**Previsão de mortes da covid-19 no mundo, utilizando o Prophet.**

**DADOS CONTENDO SÉRIES TEMPORAIS.**
Em séries temporais a tendência muda o tempo todo, por isso é impossível ter certeza se faremos a coisa mais razoável possíovel e assumimos que o futuro sofrerá mudanças de tendência.
Nesse caso, assumiremos um intervalo de confiança de 95%, ou seja admitimos um erro de 5%.

**Instanciando o Prophet e informando o intervalo de 95%**
"""

# Variável FB intanciando o Prophet
fb = Prophet(interval_width=0.95)

"""**Treinando meu modelo. Minha variável fb que já contém o Prophet instanciado, chama o método fit e passo como parâmetro minha variável mortes que já contém as colunas de dados ds e y.**"""

fb.fit(mortes)

"""**Criando um futuro utilizando o Prophet.**"""

# Variável onde informo os dias que quero calcular
dias = 10

# Crio uma variável futuro
# Recebe a variável fb e chamo o método make_future_dataframe
# Para esse método informo um período para essa previsão de futuro
# Para ativar a sazonalidade diária, após infomar o período basta dar uma vírgula e informar daily_seasonality=True
# futuro = fb.make_future_dataframe(periods=7, daily_seasonality=True)
futuro = fb.make_future_dataframe(periods=dias)
futuro.tail(dias)

"""**Fazendo uma previsão utilizando o método predict**"""

# Crio uma variável futuro
# Recebe a variável fb que instanciei o Prophet
# Passo como parâmetro a minha variável futuro que contém os dados de futuro
previsao = fb.predict(futuro)

previsao.tail(dias)

"""**Desses dados de previsão do futuro, eu preciso da data, previsão para baixo, previsão do meio e previsão para cima. Tenho o pico baixo, médio e alto.**"""

previsao[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(dias)

"""**Plotando a previsão**"""

results = fb.plot(previsao)